/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Ventanas;

import Metodos.Imagenes;
import Metodos.MEquipos;
import Metodos.ValidarDatos;
import User.Equipo;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import org.netbeans.lib.awtextra.AbsoluteConstraints;

/**
 *
 * @author allil
 */
public class ventanaCrearEquipo extends javax.swing.JFrame {

    private String id;
    String codigoEquipo;
    private ArrayList<Equipo> equipos;
    private ArrayList<Equipo> nombreEquipo;
    private ArrayList<Equipo> tipoEquipo;
    private ArrayList<Equipo> teamCode;

    /**
     * Creates new form ventanaCrearEquipo
     */
    public ventanaCrearEquipo(String id) {
        initComponents();
        this.id = id; //id del docente
        equipos = new ArrayList<>();  // Inicializa la lista de cursos
        teamCode = new ArrayList<>();  // Initialize the courseCode list

        for (Equipo equipo : teamCode) {
            System.out.println(equipo.getCodigo());
        }

        equipos = new ArrayList<>();  // Inicializa la lista de equipos
        
        // Carga los equipos desde el archivo
        cargarEquiposDesdeArchivo();
        System.out.println("Doc del usuario" + id);
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setTitle("Train Volley");
        // Cargar una imagen como icono desde el paquete "img" y establecerla en la ventana
        ImageIcon icono = new ImageIcon(getClass().getResource("/img/Logon_sinFondo.png"));
        this.setIconImage(icono.getImage());
        // Crear objeto de la clase Imagenes
        Imagenes icon = new Imagenes();
        Icon agregarEquipo = icon.setIcono("/img/CrearEquipo.png", 150, 80);
        jCrearEquipo.setIcon(agregarEquipo);

        Icon eliminarEquipo = icon.setIcono("/img/EliminarEquipo.png", 150, 80);
        jEliminarEquipo.setIcon(eliminarEquipo);

    }

    private ventanaCrearEquipo() {
    }

    /*private ventanaCrearEquipo() {
    }*/
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanelBotonesEquipos = new javax.swing.JPanel();
        jCrearEquipo = new javax.swing.JButton();
        jEliminarEquipo = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btn_Volver = new javax.swing.JButton();
        jFondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelBotonesEquipos.setBackground(new java.awt.Color(252, 252, 215));
        jPanelBotonesEquipos.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.add(jPanelBotonesEquipos, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 90, 590, 420));

        jCrearEquipo.setFont(new java.awt.Font("Rockwell", 0, 12)); // NOI18N
        jCrearEquipo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/CrearEquipo.png"))); // NOI18N
        jCrearEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCrearEquipoActionPerformed(evt);
            }
        });
        jPanel1.add(jCrearEquipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 150, 80));

        jEliminarEquipo.setFont(new java.awt.Font("Rockwell", 0, 12)); // NOI18N
        jEliminarEquipo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/EliminarEquipo.png"))); // NOI18N
        jEliminarEquipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEliminarEquipoActionPerformed(evt);
            }
        });
        jPanel1.add(jEliminarEquipo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 150, 80));

        jLabel1.setFont(new java.awt.Font("Rockwell", 1, 20)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Formar Equipos");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 350, -1));

        btn_Volver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/flecha.png"))); // NOI18N
        btn_Volver.setPreferredSize(new java.awt.Dimension(70, 71));
        btn_Volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_VolverActionPerformed(evt);
            }
        });
        jPanel1.add(btn_Volver, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 46, 41));

        jFondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/FondoR.png"))); // NOI18N
        jPanel1.add(jFondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(-3, -4, 800, 510));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCrearEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCrearEquipoActionPerformed
        // Solicitar código del equipo
        String codigoEquipo = JOptionPane.showInputDialog(this, "Ingrese el código del nuevo equipo:");

        if (codigoEquipo != null && !codigoEquipo.trim().isEmpty()) {
            // Verificar el formato del código del equipo
            if (!codigoEquipo.matches("\\d{4}")) {
                JOptionPane.showMessageDialog(this, "El código del equipo debe ser de 4 dígitos.");
                return;
            }

            // Verificar si el equipo ya existe
            if (existeEquipo(codigoEquipo)) {
                JOptionPane.showMessageDialog(this, "Ya existe un equipo con este código.");
                return;
            }

            // Solicitar nombre del equipo
            String nombreEquipo = JOptionPane.showInputDialog(this, "Ingrese el nombre del nuevo equipo:");

            // Verificar si se proporcionó un nombre de equipo
            if (nombreEquipo != null && !nombreEquipo.trim().isEmpty()) {
                // Crear un JComboBox para seleccionar el tipo de equipo
                String[] opciones = {"Femenino", "Masculino", "Mixto"};
                JComboBox<String> tipoEquipoCombo = new JComboBox<>(opciones);
                tipoEquipoCombo.setSelectedIndex(0); // Establecer la opción predeterminada

                // Mostrar un diálogo con el JComboBox
                int opcionSeleccionada = JOptionPane.showOptionDialog(
                        this,
                        tipoEquipoCombo,
                        "Seleccione el tipo de equipo",
                        JOptionPane.OK_CANCEL_OPTION,
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        null,
                        null
                );

                // Verificar si se seleccionó una opción y actuar en consecuencia
                if (opcionSeleccionada == JOptionPane.OK_OPTION) {
                    String tipoEquipo = (String) tipoEquipoCombo.getSelectedItem();

                    // Crear el equipo y agregarlo a la lista
                    crearEquipo(codigoEquipo, nombreEquipo, tipoEquipo, 0); // Aquí se pasa la cantidad de jugadores como 0 temporalmente
                    Equipo nuevoEquipo = new Equipo(codigoEquipo, nombreEquipo, tipoEquipo, 0);
                    equipos.add(nuevoEquipo);

                    // Actualizar la ventana solo si el equipo no existe en el panel
                    if (!existeBotonEquipo(nombreEquipo)) {
                        actualizarVentana();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "El nombre del equipo no puede estar vacío.");
            }
        }
    }//GEN-LAST:event_jCrearEquipoActionPerformed

    private boolean existeBotonEquipo(String nombreEquipo) {
        for (Component component : jPanelBotonesEquipos.getComponents()) {
            if (component instanceof JButton) {
                JButton button = (JButton) component;
                if (button.getText().equals(nombreEquipo)) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean contieneSoloLetras(String texto) {
        return texto.matches("^[a-zA-Z]+$");
    }

    public boolean existeEquipo(String teamCode) {

        try {
            BufferedReader br = new BufferedReader(new FileReader("equipo.txt"));
            String line;
            while ((line = br.readLine()) != null) {
                String[] datos = line.split(";");
                if (datos.length >= 4) {
                    String code = datos[0];

                    if (teamCode.equals(code)) {
                        br.close();
                        return true; // El usuario ya existe en el archivo
                    }
                }
            }

            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return false; // El equipo no existe en el archivo 

    }

    private void btn_VolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_VolverActionPerformed
        Menu frame = new Menu(id);
        frame.setVisible(true);
        this.setVisible(false);

    }//GEN-LAST:event_btn_VolverActionPerformed

    private void jEliminarEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEliminarEquipoActionPerformed
        if (equipos.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay equipos para eliminar.", "Error", JOptionPane.ERROR_MESSAGE);

        } else {
            Object[] options = equipos.stream()
                    .map(equipo -> equipo.getNombreEquipo()) // Obtener el nombre del curso
                    .toArray();

            String nombreEquipoAEliminar = (String) JOptionPane.showInputDialog(this,
                    "Selecciona el equipo que deseas eliminar:",
                    "Eliminar Equipo",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    options,
                    options[0]);

            if (nombreEquipoAEliminar != null) {
                // Buscar el curso a eliminar
                Equipo equipoAEliminar = null;
                for (Equipo equipo : equipos) {
                    if (equipo.getNombreEquipo().equals(nombreEquipoAEliminar)) {
                        equipoAEliminar = equipo;
                        break;
                    }
                }

                if (equipoAEliminar != null) {
                    equipos.remove(equipoAEliminar);
                    // Eliminar el botón del curso del panel
                    Component[] components = jPanelBotonesEquipos.getComponents();
                    for (Component component : components) {
                        if (component instanceof JButton) {
                            JButton equipoButton = (JButton) component;
                            if (equipoButton.getText().equals(nombreEquipoAEliminar)) {
                                jPanelBotonesEquipos.remove(equipoButton);
                                String lineToRemove = nombreEquipoAEliminar;

                                try {

                                    File inputFile = new File("equipo.txt");
                                    File outputFile = new File("equipo_act.txt");

                                    BufferedReader br = new BufferedReader(new FileReader(inputFile));
                                    BufferedWriter bw = new BufferedWriter(new FileWriter(outputFile));

                                    String currentLine;
                                    while ((currentLine = br.readLine()) != null) {
                                        String[] datos = currentLine.split(";");

                                        String nombre = datos[1];
                                        if (nombre.trim().equals(lineToRemove)) {
                                            continue;
                                        }
                                        bw.write(currentLine + System.getProperty("line.separator"));

                                    }
                                    JOptionPane.showMessageDialog(this, "Equipo eliminado correctamente.");

                                    bw.close();
                                    br.close();
                                    actualizarVentana();
                                    actualizarTxt();
                                } catch (IOException e) {
                                    e.printStackTrace();
                                }

                                break;
                            }
                        }
                    }
                    // Actualizar el panel
                    jPanelBotonesEquipos.revalidate();
                    jPanelBotonesEquipos.repaint();

                }
            }

        }
    }//GEN-LAST:event_jEliminarEquipoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaCrearEquipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaCrearEquipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaCrearEquipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaCrearEquipo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventanaCrearEquipo().setVisible(true);
            }
        });

    }

    public void actualizarVentana() {
        jPanelBotonesEquipos.removeAll();
        crearBotonesEquipos();
        jPanelBotonesEquipos.revalidate();
        jPanelBotonesEquipos.repaint();
    }
    
    public void actualizarTxt() {
        try {
            File inFile = new File("equipo_act.txt");
            File outFile = new File("equipo.txt");

            FileInputStream in = new FileInputStream(inFile);
            FileOutputStream out = new FileOutputStream(outFile);

            int c;
            while ((c = in.read()) != -1) {
                out.write(c);
            }

            in.close();
            out.close();
        } catch (IOException e) {
            System.err.println("Hubo un error");
        }
    }

    private void cargarEquiposDesdeArchivo() {
        try (BufferedReader br = new BufferedReader(new FileReader("equipo.txt"))) {

            String line;
            while ((line = br.readLine()) != null) {
                String[] datos = line.split(";");
                if (datos.length >= 4) {
                    String codigo = datos[0];
                    String nombreEquipo = datos[1];
                    String tipoEquipo = datos[2];
                    int cantidadJugadores = Integer.parseInt(datos[3]);

                    Equipo equipo = new Equipo(codigo, nombreEquipo, tipoEquipo, cantidadJugadores);
                    equipos.add(equipo);

                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        crearBotonesEquipos();
    }

    //Crea los botones de cada equipo que se agregan en el panel
    public void crearBotonesEquipos() {
        for (Equipo equipo : equipos) {
            crearBotonCurso(equipo.getNombreEquipo());
            equipo.getCodigo();
            equipo.getTipoEquipo();
            equipo.getCantidadJugadores();
            System.out.println("Equipo: " + equipo.getNombreEquipo() + ", Código: " + equipo.getCodigo() + ", Tipo de eqiipo: " + equipo.getTipoEquipo() + ", Cantidad de jugadores: " + equipo.getCantidadJugadores());

        }
    }

    public void crearEquipo(String teamCode, String nombreEquipo, String tipoEquipo, int cantidadJugadores) {

        try {
            FileWriter fw = new FileWriter("equipo.txt", true);
            BufferedWriter bw = new BufferedWriter(fw);
            PrintWriter pw = new PrintWriter(bw);
            pw.print(teamCode + ";");
            pw.print(nombreEquipo + ";");
            pw.print(tipoEquipo + ";");
            pw.print(cantidadJugadores + "\n");
            pw.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    public void crearBotonCurso(String teamName) {
        JButton equipoButton = new JButton(teamName); // Aquí establecemos el texto del botón con el nombre del equipo
        equipoButton.setPreferredSize(new Dimension(120, 40));
        equipoButton.setMargin(new Insets(10, 10, 10, 10));
        equipoButton.setBackground(new Color(255, 153, 51));
        equipoButton.setForeground(Color.BLACK);

        equipoButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
            MEquipos metodos = new MEquipos();
            String nombreEquipoSeleccionado = equipoButton.getText();
            String codeEquipoSeleccionado = metodos.obtenerCodEquipo(nombreEquipoSeleccionado); // Corregido aquí
            metodos.abrirInfoE(codeEquipoSeleccionado); // Invoca el método para abrir la ventanaInfoE y mostrar los datos del equipo seleccionado
            }
        });

        jPanelBotonesEquipos.add(equipoButton); // Agrega el botón al panel
        jPanelBotonesEquipos.revalidate();
        jPanelBotonesEquipos.repaint();

    }
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Volver;
    private javax.swing.JButton jCrearEquipo;
    private javax.swing.JButton jEliminarEquipo;
    private javax.swing.JLabel jFondo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelBotonesEquipos;
    // End of variables declaration//GEN-END:variables

    private void crearBotonCurso(String nombreEquipo, String codigo, int cantidadJugadores) {
    }

    private void crearEquipo(String codigoEquipo, String nombreEquipo, String tipoEquipo) {
    }

}
